import { app, BrowserWindow, ipcMain ,autoUpdater} from 'electron';
// eslint-disable-next-line import/no-unresolved
import { readFileSync, writeFileSync } from 'original-fs';
import { exec } from 'child_process';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
        },
    });
    function adjustVisualEffects(effect, enable) {
        let command = '';

        switch (effect) {
            case 'animations':
                command = `Set-ItemProperty -Path 'HKCU:\\Control Panel\\Desktop' -Name 'MinAnimate' -Value ${enable ? 1 : 0}`;
                break;
            case 'transparency':
                command = `Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize' -Name 'EnableTransparency' -Value ${enable ? 1 : 0}`;
                break;
            case 'shadows':
                command = `Set-ItemProperty -Path 'HKCU:\\Control Panel\\Desktop' -Name 'DragFullWindows' -Value ${enable ? 1 : 0}`;
                break;
            default:
                console.log('Unknown effect type');
                return;
        }

        command.replace(/[\r\n]+/gm, "");
        console.log(`powershell -Command "${command}"`);
        exec(`powershell -Command "${command}"`, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error adjusting visual effect: ${error}`);
                console.error(stderr);
                return;
            }
            console.log(`Visual effect adjusted: ${effect} = ${enable}`);
        });
    }
    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    ipcMain.handle('submit-pressed', (event, path: string): Promise<string> => {
        let sensLine = "";
        let indexOfLine: number;
        const data = readFileSync(path, { encoding: 'utf8', flag: 'r' });
        exec('NET SESSION', function(err, so, se) {
            console.log(se.length === 0 ? "admin" : "not admin");
        });

        adjustVisualEffects('animations', true);

        const lines: string[] = data.split('\n');
        lines.forEach((line, i) => {
            if (line.includes("lin4")) {
                indexOfLine = i;
                sensLine = line;
            }
        })
        lines[indexOfLine] = lines[indexOfLine].replace("cookingvalue", "4");
        const result = lines.join('\n');
        writeFileSync(path, result, { encoding: 'utf8', flag: 'w' });

        return Promise.resolve(sensLine);
    })
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
